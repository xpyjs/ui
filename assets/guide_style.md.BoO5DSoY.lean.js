import{_ as a,a as i,o as e,ac as t}from"./chunks/framework.BdS6JSUB.js";const c=JSON.parse('{"title":"样式基础","description":"","frontmatter":{},"headers":[],"relativePath":"guide/style.md","filePath":"guide/style.md"}'),n={name:"guide/style.md"};function l(p,s,h,r,k,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="样式基础" tabindex="-1">样式基础 <a class="header-anchor" href="#样式基础" aria-label="Permalink to &quot;样式基础&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>本项目中，使用了 SCSS 作为样式预处理器，默认已经提供了编译后的 css 版本，可以直接使用。</p><p>在全局使用时，只需要引入 <code>@xpyjs/x-ui/index.css</code> 即可。</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>本项目采用了大量的 css 变量，这样可以方便的定制我们所需要的内容。</p><p>我们内置了各种 color、size、border、shadow 等变量，可以直接使用。</p><h2 id="自定义样式" tabindex="-1">自定义样式 <a class="header-anchor" href="#自定义样式" aria-label="Permalink to &quot;自定义样式&quot;">​</a></h2><p>方法1：直接替换变量名</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --x-color-primary-500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#eca710</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>方法2：使用@forward 替换 scss 中的变量（推荐）</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../../packages/styles/vars.scss&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  $base-colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;primary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eca710</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 先使用 forward 替换变量，再使用 @use 替换变量名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../../packages/styles/index.scss&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在变量替换时，可以参考源码中 <a href="https://github.com/xpyjs/ui/blob/main/packages/styles/vars.scss" target="_blank" rel="noreferrer">vars.scss</a> 文件，根据文件中的格式和结构，根据需要进行替换就可以。</p><h2 id="更多自定义内容" tabindex="-1">更多自定义内容 <a class="header-anchor" href="#更多自定义内容" aria-label="Permalink to &quot;更多自定义内容&quot;">​</a></h2><p>当然，我们还可以自定义更多样式，这就不属于 UI 的范围，而是属于项目的范围了。原则上，变量只要在使用前被定义过，就可以使用。</p>`,15)]))}const E=a(n,[["render",l]]);export{c as __pageData,E as default};
