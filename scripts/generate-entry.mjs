import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 先读取根目录下 packages.json 中的版本号
const __version__ = JSON.parse(fs.readFileSync(path.resolve(__dirname, "..", "package.json"), "utf-8")).version;

// 项目根目录
const ROOT_DIR = path.resolve(__dirname, "..");
// packages 目录
const PACKAGES_DIR = path.resolve(ROOT_DIR, "packages");
// 组件目录
const COMPONENTS_DIR = path.resolve(PACKAGES_DIR, "components");
// 指令目录
const DIRECTIVES_DIR = path.resolve(PACKAGES_DIR, "directives");
// 类型目录
const TYPES_DIR = path.resolve(PACKAGES_DIR, "types");
// 全局方法目录
const GLOBAL_DIR = path.resolve(PACKAGES_DIR, "global");

let componentCount = 0;
let directiveCount = 0;
let globalCount = 0;

// 获取组件列表
function getComponents() {
  return fs
    .readdirSync(COMPONENTS_DIR)
    .filter(name => {
      const componentDir = path.resolve(COMPONENTS_DIR, name);
      const isDir = fs.statSync(componentDir).isDirectory();
      return isDir && fs.existsSync(path.resolve(componentDir, "index.ts"));
    })
    .map(name => ({
      name,
      importName: `X${name.split('-')
        .map(part => part.charAt(0).toUpperCase() + part.slice(1))
        .join('')}`,
      componentPath: `./components/${name}/index.ts`
    }));
}

// 获取指令列表
function getDirectives() {
  return fs
    .readdirSync(DIRECTIVES_DIR)
    .filter(name => {
      const filename = path.resolve(DIRECTIVES_DIR, name);
      const isDir = fs.statSync(filename).isDirectory();
      return isDir && fs.existsSync(path.resolve(filename, "index.ts"));
    })
    .map(name => ({
      name,
      importName: `v${name.charAt(0).toUpperCase()}${name.slice(1)}`,
      directivePath: `./directives/${name}/index.ts`
    }));
}

// 获取全局方法列表
function getGlobals() {
  return fs.readdirSync(GLOBAL_DIR).map(name => ({
    name,
    importName: `use${name.charAt(0).toUpperCase()}${name.slice(1)}`,
    globalPath: `./global/${name}/index.ts`
  }));
}

// 获取类型导出
function getTypes() {
  const typesFile = path.resolve(TYPES_DIR, "basic.ts");
  if (!fs.existsSync(typesFile)) return [];

  const content = fs.readFileSync(typesFile, "utf-8");
  const exportMatches = content.match(/export type ([A-Za-z]+)/g);
  if (!exportMatches) return [];

  return exportMatches.map(match => match.replace("export type ", ""));
}

// 生成入口文件内容
function generateEntryContent() {
  const components = getComponents();
  const directives = getDirectives();
  const globals = getGlobals();
  const types = getTypes();

  componentCount = components.length;
  directiveCount = directives.length;
  globalCount = globals.length;

  const imports = [
    '/** This file is automatically generated by the build script */',
    'import { type App } from "vue";',
    ...components.map(
      ({ importName, componentPath }) =>

        `import { ${importName} } from "${componentPath}";`
    ),
    '\n',
    ...directives.map(
      ({ importName, directivePath }) =>
        `import { ${importName.replace(".ts", "")} } from "${directivePath}";`
    ),
    '\n',
    ...globals.map(
      ({ name, globalPath }) =>
        `import ${name} from "${globalPath}";`
    )
  ];

  const exports = [
    '// 导出内部所有内容',
    ...components.map(
      ({ componentPath }) =>
        `export * from "${componentPath}";`
    ),
    `\n// 导出类型\nexport type {\n  ${types.join(",\n  ")}\n} from "./types/basic";`,
    '\n',
    ...globals.map(
      ({ importName, globalPath }) =>
        `export { ${importName} } from "${globalPath}";`
    )
  ];


  // 修改组件列表的格式，使其更易读
  const componentsList = components
    .map(({ importName }) => `  ${importName}`)
    .join(",\n");

  // 修改指令对象的格式，使用 name 作为 key
  const directivesList = directives
    .map(({ name, importName }) => `  ${name.replace(".ts", "")}: ${importName.replace(".ts", "")}`)
    .join(",\n");

  const globalsList = globals
    .map(({ name }) => `  $${name}: ${name}`)
    .join(",\n");

  const installFunction = `
const components = [
${componentsList}
];
const directives = {
${directivesList}
};
const globals = {
${globalsList}
};

export default {
  install: (app: App) => {
    components.forEach(component => {
      app.use(component);
    });

    Object.entries(directives).forEach(([name, directive]) => {
      app.directive(name, directive);
    });

    Object.entries(globals).forEach(([name, global]) => {
      app.config.globalProperties[name] = global;
    });

    app.config.globalProperties.$XUI = {
      version: "${__version__}"
    };
  }
};`;

  return `${imports.join("\n")}\n\n${exports.join("\n")}\n\n${installFunction}\n`;
}

// 写入文件
function writeEntryFile() {
  const content = generateEntryContent();
  const entryPath = path.resolve(PACKAGES_DIR, "index.ts");
  fs.writeFileSync(entryPath, content, "utf-8");
  console.log('\x1b[32m【BUILD】Entry file generated successfully!\x1b[0m');
  console.log(`\x1b[36m当前共有组件 ${componentCount} 个，指令 ${directiveCount} 个，全局方法 ${globalCount} 个\x1b[0m`);
}

writeEntryFile();
